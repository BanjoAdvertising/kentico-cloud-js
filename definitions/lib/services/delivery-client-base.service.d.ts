import { Http } from '@angular/http';
import { Observable } from 'rxjs/Observable';
import { DeliveryClientConfig } from '../config/delivery-client.config';
import { ResponseSingle, ResponseMultiple } from '../models/item/responses';
import { IItem } from '../interfaces/item/iitem.interface';
import { IQueryOption } from '../interfaces/common/iquery-option.interface';
import { MultipleTypeResponse, SingleTypeResponse } from '../models/type/responses';
import { ItemMapService } from '../utility-services/item-map.service';
import { TypeMapService } from '../utility-services/type-map.service';
import 'rxjs/add/operator/catch';
import 'rxjs/add/operator/map';
import 'rxjs/add/observable/throw';
export declare abstract class DeliveryClientBaseService {
    protected http: Http;
    protected config: DeliveryClientConfig;
    protected itemMapService: ItemMapService;
    protected typeMapService: TypeMapService;
    constructor(http: Http, config: DeliveryClientConfig);
    private getUrl(action, options?);
    private getBaseUrl();
    private addOptionsToUrl(url, options?);
    private getError(error);
    private getSingleTypeResponse(response);
    private getMultipleTypeResponse(response, options?);
    private getSingleResponse<TItem>(response);
    private getMultipleResponse<TItem>(response);
    protected getSingleItem<TItem extends IItem>(action: string, options?: IQueryOption[]): Observable<ResponseSingle<TItem>>;
    protected getMultipleItems<TItem extends IItem>(action: string, options?: IQueryOption[]): Observable<ResponseMultiple<TItem>>;
    protected getSingleType(action: string, options?: IQueryOption[]): Observable<SingleTypeResponse>;
    protected getMultipleTypes(action: string, options?: IQueryOption[]): Observable<MultipleTypeResponse>;
}
